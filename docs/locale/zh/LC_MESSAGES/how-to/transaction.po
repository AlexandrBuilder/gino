# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-present, Fantix King
# This file is distributed under the same license as the GINO package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GINO \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-23 02:02-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:3
msgid "Transaction"
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:5
msgid "Table of Contents"
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:7
msgid ""
"It is crucial to correctly manage transactions in an asynchronous "
"program, because you never know how much time an ``await`` will actually "
"wait for, it will cause disasters if transactions are on hold for too "
"long. GINO enforces explicit transaction management to help dealing with "
"it."
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:14
msgid "Basic usage"
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:16
msgid ""
"Transactions belong to :class:`~gino.engine.GinoConnection`. The most "
"common way to use transactions is through an ``async with`` statement::"
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:22
msgid ""
"This guarantees a transaction is opened when entering the ``async with`` "
"block, and closed when exiting the block - committed if exits normally, "
"or rolled back by exception. The underlying transaction instance from the"
" database driver is available at "
":attr:`~gino.transaction.GinoTransaction.raw_transaction`, but in most "
"cases you don't need to touch it."
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:28
msgid "GINO provides two convenient shortcuts to end the transaction early:"
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:30
msgid ":meth:`tx.raise_commit() <gino.transaction.GinoTransaction.raise_commit>`"
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:31
msgid ""
":meth:`tx.raise_rollback() "
"<gino.transaction.GinoTransaction.raise_rollback>`"
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:33
msgid ""
"They will raise an internal exception to correspondingly commit or "
"rollback the transaction, thus the code within the ``async with`` block "
"after :meth:`~gino.transaction.GinoTransaction.raise_commit` or "
":meth:`~gino.transaction.GinoTransaction.raise_rollback` is skipped. The "
"internal exception is inherited from :exc:`BaseException` so that normal "
"``try ... except Exception`` block can't trap it. This exception stops "
"propagating at the end of ``async with`` block, so you don't need to "
"worry about handling it."
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:41
msgid "Transactions can also be started on a :class:`~gino.engine.GinoEngine`::"
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:46
msgid ""
"Here a :class:`~gino.engine.GinoConnection` is borrowed implicitly before"
" entering the transaction, and guaranteed to be returned after "
"transaction is done. The :class:`~gino.engine.GinoConnection` instance is"
" accessible at :attr:`tx.connection "
"<gino.transaction.GinoTransaction.connection>`. Other than that, "
"everything else is the same."
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:54
msgid ""
"The implicit connection is by default borrowed with ``reuse=True``. That "
"means using :meth:`~gino.engine.GinoEngine.transaction` of "
":class:`~gino.engine.GinoEngine` within a connection context is the same "
"as calling :meth:`~gino.engine.GinoConnection.transaction` of the current"
" connection without having to reference it, no separate connection shall "
"be created."
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:61
msgid ""
"Similarly, if your :class:`~gino.api.Gino` instance has a bind, you may "
"also do the same on it::"
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:69
msgid "Nested Transactions"
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:71
msgid ""
"Transactions can be nested, nested transaction will create a `savepoint "
"<https://www.postgresql.org/docs/current/static/sql-savepoint.html>`_ as "
"for now on asyncpg. A similar example from asyncpg doc::"
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:88
msgid ""
"As you can see, the "
":meth:`~gino.transaction.GinoTransaction.raise_rollback` breaks only the "
"``async with`` block of the specified ``tx2``, the outer transaction "
"``tx1`` just continued. What if we break the outer transaction from "
"within the inner transaction? The inner transaction context won't trap "
"the internal exception because it recognizes the exception is not created"
" upon itself. Instead, the inner transaction context only follows the "
"behavior to either commit or rollback, and lets the exception propagate."
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:96
msgid ""
"Because of the default reusing behavior, transactions on engine or ``db``"
" follows the same nesting rules. Please see "
":class:`~gino.transactions.GinoTransaction` for more information."
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:102
msgid "Manual Control"
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:104
msgid ""
"Other than using ``async with``, you can also manually control the "
"transaction::"
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/how-to/transaction.rst:115
msgid ""
"You can't use :meth:`~gino.transaction.GinoTransaction.raise_commit` or "
":meth:`~gino.transaction.GinoTransaction.raise_rollback` here, similarly "
"it is prohibited to use :meth:`~gino.transaction.GinoTransaction.commit` "
"and :meth:`~gino.transaction.GinoTransaction.rollback` in an ``async "
"with`` block."
msgstr ""

