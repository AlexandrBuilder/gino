# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-present, Fantix King
# This file is distributed under the same license as the GINO package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Fantix King <fantix.king@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GINO\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-23 02:02-0600\n"
"PO-Revision-Date: 2019-12-26 17:38+0000\n"
"Last-Translator: Fantix King <fantix.king@gmail.com>, 2019\n"
"Language-Team: Chinese (https://www.transifex.com/decentfox-studio/teams/84194/zh/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:2
msgid "Tutorial"
msgstr "上手教程"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:4
msgid "Table of Contents"
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:6
msgid ""
"This tutorial helps beginners to get started with the basic part of GINO. "
"Target audiences of this tutorial should have basic knowledge of:"
msgstr "这是一篇写给刚入坑同学的指南，将介绍 GINO 的基本部分。阅读之前，请先了解以下知识点："

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:9
msgid "RDBMS, especially PostgreSQL_"
msgstr "关系型数据库，尤其是 PostgreSQL_"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:10
msgid "Asynchronous programming in Python"
msgstr "Python 异步编程"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:12
msgid "Knowledge of SQLAlchemy_ is not required."
msgstr "您不需要对 SQLAlchemy_ 有所了解。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:18
msgid "Introduction"
msgstr "介绍"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:20
msgid ""
"Simply speaking, GINO helps you write and execute raw SQL in your "
"asynchronous application. Instead of interacting RDBMS directly with raw "
"SQL, you can access your data through friendly objective API."
msgstr ""
"简单来说，GINO 可以在您的异步应用中帮助您完成 SQL 语句的生成及执行，您只需要通过友好的对象化 API 来操作您的数据即可，无需亲自编写 SQL"
" 与数据库交互。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:24
msgid ""
"You may not need GINO, or else to say asynchronous database connection, "
"because it adds quite some complexity and risk to your stack, and it won't "
"make your code run faster, if not slower. Please read "
":doc:`/explanation/why` for more information."
msgstr ""
"因为异步编程并不会使您的程序变快——如果说不拖累的话——而且还会增加复杂度和风险，所以也许您并不需要 GINO 或者说是异步数据库连接。跳坑之前请先阅读"
" :doc:`/explanation/why`。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:31
msgid "Installation"
msgstr "安装"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:34
msgid "Stable release"
msgstr "稳定版"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:36
msgid "To install GINO, run this command in your terminal:"
msgstr "请在终端中执行以下命令以安装 GINO："

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:42
msgid ""
"This is the preferred method to install GINO, as it will always install the "
"most recent stable release."
msgstr "以上就是安装 GINO 的推荐方式，因为这种方式始终会去安装最新的稳定版。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:45
msgid ""
"If you don't have `pip`_ installed, this `Python installation guide`_ can "
"guide you through the process."
msgstr "如果您还没有安装过 `pip`_，您可以参阅 `Python installation guide`_。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:53
msgid "From sources"
msgstr "从源码安装"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:55
msgid "The sources for GINO can be downloaded from the `Github repo`_."
msgstr "GINO 的源码可以从 `Github repo`_ 下载。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:57
msgid "You can either clone the public repository:"
msgstr "您可以 git clone："

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:63
msgid "Or download the `tarball`_:"
msgstr "或者下载 `tarball`_："

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:69
msgid "Once you have a copy of the source, you can install it with:"
msgstr "拿到源码后，您可以这样安装："

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:81
msgid "Declare Models"
msgstr "声明模型"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:83
msgid ""
"First of all, we'll need a :class:`~gino.api.Gino` object, usually under the"
" name of ``db`` as a global variable::"
msgstr "开始之前，我们需要先创建一个 :class:`~gino.api.Gino` 的全局实例，通常叫做 ``db``： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:90
msgid ""
"``db`` acts like a reference to the database, most database interactions "
"will go through it."
msgstr "``db`` 可以被当做是数据库的一个代表，后续大部分的数据库交互都将通过它来完成。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:93
msgid ""
"\"Model\" is a basic concept in GINO, it is a Python class inherited from "
":attr:`db.Model <gino.api.Gino.Model>`. Each "
":class:`~gino.declarative.Model` subclass maps to one table in the database,"
" while each object of the class represents one row in the table. This must "
"feel familiar if ORM is not a strange word to you. Now let's declare a "
"model::"
msgstr ""
"“Model” 是 GINO 中的一个基本概念，它表示继承自 :attr:`db.Model <gino.api.Gino.Model>` "
"的用户定义类。每个  :class:`~gino.declarative.Model` "
"的子类代表了数据库中的一张表，而这些类的对象则代表了对应表中的一行数据。如果您曾经使用过其它 ORM "
"产品，对这种映射关系应该不感到陌生。现在我们尝试定义一个 model： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:105
msgid ""
"By declaring this ``User`` class, we are actually defining a database table "
"named ``users``, with two columns ``id`` and ``nickname``. Note that the "
"fixed :attr:`~gino.declarative.Model.__tablename__` property is required. "
"GINO suggests singular for model names, and plural for table names. Each "
":class:`db.Column <sqlalchemy.schema.Column>` property defines one column "
"for the table, where its first parameter indicates the column type in "
"database, while the rest is for other column attributes or constraints. You "
"can find a mapping of database types to ``db`` types `here "
"<http://docs.sqlalchemy.org/en/latest/core/type_basics.html>`__ in the "
"SQLAlchemy documentation."
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:118
msgid ""
"SQLAlchemy_ is a powerful ORM library for non-asynchronous programming in "
"Python, on top of which GINO is built. SQLAlchemy supports many popular "
"RDBMS including PostgreSQL and MySQL through different dialect "
"implementation, so that the same Python code can be compiled into different "
"SQL depending on the dialect you choose. GINO inherited this support too, "
"but for now there is only one dialect for PostgreSQL through asyncpg_."
msgstr ""
"SQLAlchemy_ 是 Python 中一个强大的非异步 ORM 库，而 GINO 就是基于其构建的。通过不同的 SQL "
"方言实现，SQLAlchemy 支持包括 PostgreSQL 和 MySQL 在内的许多流行的 RDBMS，以至于有时相同的 Python "
"代码可以不经修改地运行在不同的数据库上。GINO 自然也承袭了这一特性，但目前暂仅支持 PostgreSQL（通过 asyncpg_）。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:128
msgid ""
"If you need constraints or indexes covering multiple columns these are also "
"defined using properties in model classes. The property names must be "
"unique, but are otherwise not used. Example::"
msgstr "如果需要定义涵盖多个列的数据库约束或索引，您仍然可以通过 model 类属性的方式来定义，属性名称虽未被用到，但不能重复。例如： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:143
msgid ""
"It is also possible to define model constraints and indexes outside the "
"model class if that is preferred. For more details on constraints and "
"indexes, see `here "
"<http://docs.sqlalchemy.org/en/latest/core/constraints.html>`__ in the "
"SQLAlchemy documentation."
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:148
msgid ""
"Due to implementation limitations it is currently not allowed to specify "
"explicit constraints and indexes as direct attributes in classes that are "
"meant to be subclassed. The same is true for constraints and indexes "
"specified through the :attr:`~gino.declarative.Model.__table_args__` "
"attribute. In order to e.g. define constraints in mixin classes, "
":func:`~gino.declarative.declared_attr` is required. Please feel free to "
"read more about it in its API documentation."
msgstr ""
"由于一些限制，目前不允许在父类中直接使用类属性的方式来单独定义数据库约束和索引，:attr:`~gino.declarative.Model.__table_args__`"
" 也是一样的。GINO 提供了 :func:`~gino.declarative.declared_attr` 来实现比如 mixin "
"类这样的功能，更多信息请参阅其 API 文档。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:158
msgid "Get Connected"
msgstr "建立连接"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:160
msgid ""
"The declaration only defined the mapping, it does not create the actual "
"table in the database. To do that, we need to get connected first. Let's "
"create a PostgreSQL database for this tutorial:"
msgstr ""
"前面的声明只是定义了映射关系，并非实际在数据库中创建了这些表结构。为了使用 GINO 来创建表，我们需要先与数据库建立连接。这里我们先为本指南创建一个 "
"PostgreSQL 的数据库实例："

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:168
msgid "Then we tell our ``db`` object to connect to this database::"
msgstr "然后，告诉我们的 ``db`` 对象去连接这个数据库： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:177
msgid ""
"If this runs successfully, then you are connected to the newly created "
"database. Here ``postgresql`` indicates the database dialect to use (the "
"default driver is ``asyncpg``, you can explicitly specify that with "
"``postgresql+asyncpg://``, or simply ``asyncpg://``), ``localhost`` is where"
" the server is, and ``gino`` is the name of the database. Check `here "
"<https://docs.sqlalchemy.org/en/latest/core/engines.html>`__ for more "
"information about how to compose this database URL."
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:187
msgid ""
"Under the hood :meth:`~gino.api.Gino.set_bind` calls "
":func:`~gino.create_engine` and bind the engine to this ``db`` object. GINO "
"engine is similar to SQLAlchemy engine, but not identical. Because GINO "
"engine is asynchronous, while the other is not. Please refer to the API "
"reference of GINO for more information."
msgstr ""
"在底层，:meth:`~gino.api.Gino.set_bind` 调用了 :func:`~gino.create_engine` 来创建 "
"engine，并将其绑定到 ``db`` 对象上。GINO engine 与 SQLAlchemy engine 类似，但 GINO engine "
"是异步的，而后者是阻塞式的。关于如何使用 engine，请参考 GINO 的 API 文档。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:193
msgid ""
"Now that we are connected, let's create the table in database (in the same "
"``main()`` method)::"
msgstr "建立连接之后，我们就可以用 GINO 在数据库中创建我们的表了（在同一个 ``main()`` 函数里）： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:200
msgid ""
"It is :meth:`db.gino.create_all <gino.schema.GinoSchemaVisitor.create_all>`,"
" not :meth:`db.create_all <sqlalchemy.schema.MetaData.create_all>`, because "
"``db`` is inherited from SQLAlchemy :class:`~sqlalchemy.schema.MetaData`, "
"and :meth:`db.create_all <sqlalchemy.schema.MetaData.create_all>` is from "
"SQLAlchemy using non-asynchronous methods, which doesn't work with the bound"
" GINO engine."
msgstr ""
"这里是 :meth:`db.gino.create_all "
"<gino.schema.GinoSchemaVisitor.create_all>`，而不是 :meth:`db.create_all "
"<sqlalchemy.schema.MetaData.create_all>`，因为 ``db`` 继承自 SQLAlchemy 的 "
":class:`~sqlalchemy.schema.MetaData`，而 :meth:`db.create_all "
"<sqlalchemy.schema.MetaData.create_all>` 是 SQLAlchemy 的阻塞式方法，无法适用于绑定的 GINO "
"engine。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:207
msgid ""
"In practice :meth:`~gino.schema.GinoSchemaVisitor.create_all` is usually not"
" an ideal solution. To manage database schema, tool like Alembic_ is "
"recommended."
msgstr ""
"实际应用中，:meth:`~gino.schema.GinoSchemaVisitor.create_all` "
"通常不是最理想的解决方案，我们推荐使用诸如 Alembic_ 这样的工具来管理数据库表结构。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:211
msgid ""
"If you want to explicitly disconnect from the database, you can do this::"
msgstr "如果您想显式地断开与数据库的连接，您可以这么做： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:215
msgid ""
"Let's review the code we have so far together in one piece before moving "
"on::"
msgstr "继续之前，让我们重新看一下前面所有的代码： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:245
msgid "CRUD Operations"
msgstr "增删改查"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:247
msgid ""
"In order to operate on the database, one of GINO's core features is to "
"Create, Retrieve, Update or Delete model objects, also known as the CRUD "
"operations."
msgstr "为了操作数据库中的数据，GINO 提供了基本的基于对象的增删改查功能。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:252
msgid "Create"
msgstr "增"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:254
msgid "Let's start by creating a ``User``::"
msgstr "让我们从创建一个 ``User`` 对象开始： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:260
msgid ""
"As mentioned previously, ``user`` object represents the newly created row in"
" the database. You can get the value of each columns by the declared column "
"properties on the object::"
msgstr ""
"正如之前所说，``user`` 对象代表了数据库中新插入的这一行数据。您可以通过 ``user`` 对象上的之前定义的列属性来访问每一列的值： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:267
msgid ""
"It is also possible to create a model instance in-memory first, modify it, "
"then finally create it in the database::"
msgstr "另外，您也可以先在内存中创建一个 ``user`` 对象，然后再将其插入到数据库中： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:275
msgid "Retrieve"
msgstr "查"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:277
msgid ""
"To retrieve a model object from database by primary key, you can use the "
"class method :meth:`~gino.crud.CRUDModel.get` on the model class. Now let's "
"retrieve the same row::"
msgstr ""
"想要通过主键来获取一个 model 对象，您可以使用 model 的类方法 "
":meth:`~gino.crud.CRUDModel.get`。比如，重新获取刚才插入的同一行数据： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:285
msgid ""
"Normal SQL queries are done through a class property "
":attr:`~gino.crud.CRUDModel.query`. For example, let's retrieve all ``User``"
" objects from database as a list::"
msgstr ""
"常规的 SQL 查询则是通过类属性 :attr:`~gino.crud.CRUDModel.query` 来完成。比如，获取数据库中所有的 "
"``User`` 对象的列表： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:293
msgid ""
"Alternatively, you can use the ``gino`` extension on "
":attr:`~gino.crud.CRUDModel.query`. This has exactly the same effect as "
"above::"
msgstr ""
"或者，您也可以使用 :attr:`~gino.crud.CRUDModel.query` 的 ``gino`` "
"扩展。比如，下面的代码可以实现一样的效果： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:302
msgid ""
"``User.query`` is actually a SQLAlchemy query, with its own non-asynchronous"
" execution methods. GINO added this ``gino`` extension on all executable "
"SQLAlchemy clause objects to conveniently execute them in the asynchronous "
"way, so that it is even not needed to import the ``db`` reference for "
"execution."
msgstr ""
"实际上，``User.query`` 是一个普通的 SQLAlchemy 查询对象，SQLAlchemy 的阻塞式执行方法依然存在其上，因此 GINO "
"向所有 SQLAlchemy 的“Executable”对象注入了一个 ``gino`` 扩展，以便在不影响 SQLAlchemy 原有 API "
"的基础上，让直接异步地执行这些查询对象更容易，而不用每次都通过 engine 或 ``db`` 对象来执行。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:308
msgid ""
"Now let's add some filters. For example, find all users with ID lower than "
"10::"
msgstr "现在让我们尝试增加一些过滤器。比如，查找出所有 ID 小于 10 的用户： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:314
msgid ""
"Read more `here "
"<https://docs.sqlalchemy.org/en/latest/core/expression_api.html>`__ about "
"writing queries, because the query object is exactly from SQLAlchemy core."
msgstr ""

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:319
msgid ""
"Once you get a model object, it is purely in memory and fully detached from "
"the database. That means, if the row is externally updated, the object "
"values remain unchanged. Likewise, changes made to the object won't affect "
"the database values."
msgstr ""
"当您拿到一个 model "
"对象时，这个对象就已经彻底与数据库分离了，完全成为内存中的一个普通对象。这就意味着，即使数据库中对应的行发生了变化，对象的值仍然不会受到丝毫影响。类似地，如果您修改了该对象的值，数据库也不会受到任何影响。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:324
msgid ""
"Also, GINO keeps no track of model objects, therefore getting the same row "
"twice returns two different object with identical values. Modifying one does"
" not magically affect the other one."
msgstr ""
"并且，GINO 也不会追踪 model 对象，因此重复查询同一行数据将会得到两个独立的、拥有相同值的对象，修改其中一个的值不会幽灵般地影响到另一个的值。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:328
msgid ""
"Different than traditional ORMs, the GINO model objects are more like "
"objective SQL results, rather than stateful ORM objects. In order to adapt "
"for asynchronous programming, GINO is designed to be that simple. That's "
"also why GINO Is Not ORM."
msgstr ""
"不同于传统 ORM 的 model 对象通常是有状态的，GINO 的 model 对象则更像是用对象封装的 SQL 查询结果，这是 GINO "
"为了适应异步编程而特意设计的简易性，也是“GINO 不是 ORM”名字的来源。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:333
msgid ""
"Sometimes we want to get only one object, for example getting the user by "
"name when logging in. There's a shortcut for this scenario::"
msgstr "有时我们仅需要获取一个对象，比如验证登录时，使用用户名来查找一个用户。这时，可以使用这种便捷的写法： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:340
msgid ""
"If there is no user named \"fantix\" in database, ``user`` will be ``None``."
msgstr "如果数据库中没有叫“fantix”的用户，则 ``user`` 会被置为 ``None``。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:342
msgid ""
"And sometimes we may want to get a single value from database, getting the "
"name of user with ID 1 for example. Then we can use the "
":meth:`~gino.crud.CRUDModel.select` class method::"
msgstr ""
"又有时，我们会需要获取一个单独的值，比如 ID 为 1 的用户的名字。此时可以使用 model 的类方法 "
":meth:`~gino.crud.CRUDModel.select`： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:351
msgid "Or get the count of all users::"
msgstr "又比如，查询用户数量： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:360
msgid "Update"
msgstr "改"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:362
msgid ""
"Then let's try to make some modifications. In this example we'll mixin some "
"retrieve operations we just tried. ::"
msgstr "接下来，让我们尝试对数据做一些修改，下面的例子会穿插一些前面用过的查询操作。 ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:385
msgid ""
"So :meth:`~gino.crud.CRUDModel.update` is the first GINO method we met so "
"far on model instance level. It accepts multiple keyword arguments, whose "
"keys are column names while values are the new value to update to. The "
"following :meth:`~gino.crud.UpdateRequest.apply` call makes the update "
"happen in database."
msgstr ""
"这里的 :meth:`~gino.crud.CRUDModel.update` 是我们碰到的第一个 model 实例上的 GINO "
"方法，它接受多个自定义命名参数，参数名对应着 model 的字段名，而参数值则为期望修改成的新的值。连着写的 "
":meth:`~gino.crud.UpdateRequest.apply` 则会将这一修改同步到数据库中。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:392
msgid ""
"GINO explicitly split the in-memory update and SQL update into two methods: "
":meth:`~gino.crud.CRUDModel.update` and "
":meth:`~gino.crud.UpdateRequest.apply`. :meth:`~gino.crud.CRUDModel.update` "
"will update the in-memory model object and return an "
":class:`~gino.crud.UpdateRequest` object which contains all the "
"modifications. A following :meth:`~gino.crud.UpdateRequest.apply` on "
":class:`~gino.crud.UpdateRequest` object will apply these recorded "
"modifications to database by executing a compiled SQL."
msgstr ""
"GINO 显式地将“修改内存中对象的值”与“修改数据库中的行”拆分成了两个方法： :meth:`~gino.crud.CRUDModel.update`"
" 与 "
":meth:`~gino.crud.UpdateRequest.apply`。:meth:`~gino.crud.CRUDModel.update` "
"负责修改内存中的值，并且将改动记录在返回的 :class:`~gino.crud.UpdateRequest` 对象中；紧接着调用的 "
":class:`~gino.crud.UpdateRequest` 对象的 :meth:`~gino.crud.UpdateRequest.apply`"
" 方法则会将这些记录下的改动通过 SQL 更新到数据库中。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:403
msgid ""
":class:`~gino.crud.UpdateRequest` object has another method named "
":meth:`~gino.crud.UpdateRequest.update` which works the same as the one on "
"model object, just that it combines the new modifications together with the "
"ones already recorded in current :class:`~gino.crud.UpdateRequest` object, "
"and it returns the same :class:`~gino.crud.UpdateRequest` object. That "
"means, you can chain the updates and end up with one "
":meth:`~gino.crud.UpdateRequest.apply`, or make use of the "
":class:`~gino.crud.UpdateRequest` object to combine several updates in a "
"batch."
msgstr ""
":class:`~gino.crud.UpdateRequest` 对象还有一个方法也叫 "
":meth:`~gino.crud.UpdateRequest.update`，它与 model 对象上的 :attr:`update() "
"<gino.crud.CRUDModel.update>` 方法的功能是一样的，只不过前者还会将新的改动记录与当前 "
":class:`~gino.crud.UpdateRequest` 已记录的改动合并在一起，并且返回同一个 "
":class:`~gino.crud.UpdateRequest` 对象。这意味着，您可以连着写多个 ``update()`` 调用，最后用一个 "
":meth:`~gino.crud.UpdateRequest.apply` 结尾，或者仅仅是通过 "
":class:`~gino.crud.UpdateRequest` 对象来完成内存对象的多次改动。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:413
msgid ""
":meth:`~gino.crud.CRUDModel.update` on model object affects only the row "
"represented by the object. If you want to do update with wider condition, "
"you can use the :meth:`~gino.crud.CRUDModel.update` on model class level, "
"with a bit difference::"
msgstr ""
"Model 对象上的 :meth:`~gino.crud.CRUDModel.update` "
"方法只能操作该对象对应的数据库中的一行数据，而如果您想要批量更新多行数据的话，您可以使用 model 类上的 "
":meth:`~gino.crud.CRUDModel.update` 类方法。用法略有不同： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:427
msgid ""
"There is no :class:`~gino.crud.UpdateRequest` here, everything is again "
"SQLAlchemy clause, its `documentation "
"<https://docs.sqlalchemy.org/en/latest/core/dml.html>`_ here for your "
"reference."
msgstr ""
"这里不再有 :class:`~gino.crud.UpdateRequest` 了，所有的操作又回到了普通的 SQLAlchemy "
"用法，更多细节可以参考 `SQLAlchemy 的文档 "
"<https://docs.sqlalchemy.org/en/latest/core/dml.html>`_。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:434
msgid "Delete"
msgstr "删"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:436
msgid "At last. Deleting is similar to updating, but way simpler. ::"
msgstr "最后，删除一行数据与更新一行数据有些类似，但要简单很多： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:447
msgid ""
"Remember the model object is in memory? In the last :func:`print` statement,"
" even though the row is already deleted in database, the object ``user`` "
"still exists with its values untouched."
msgstr ""
"还记得内存对象的事情吗？在最后一行的 :func:`print` 中，尽管数据库中已经没有这一行数据了，但是 ``user`` "
"对象依然在内存中，它的值也都没有变化，所以这里仍然可以用 ``user.id``。"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:451
msgid ""
"Or mass deletion (never forget the where clause, unless you want to truncate"
" the whole table!!)::"
msgstr "或者批量删除（千万不要忘记写 ``where``！是不是整个表都不想要了？）： ::"

#: /Volumes/Home/fantix/PycharmProjects/gino/docs/tutorials/tutorial.rst:459
msgid ""
"With basic :doc:`/how-to/crud`, you can already make some amazing stuff with"
" GINO. This tutorial ends here, please find out more in detail from the rest"
" of this documentation, and have fun hacking!"
msgstr ""
"有了基本的 :doc:`/how-to/crud`，您应该已经可以用 GINO "
"做出一些不可思议的东西来了。这篇上手指南到此结束，要了解更多请继续阅读文档的剩余部分。祝编程愉快！"
